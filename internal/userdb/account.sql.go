// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package userdb

import (
	"context"
)

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, username, password, enabled FROM "public"."account"
WHERE "id"=$1
`

func (q *Queries) GetAccountByID(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Enabled,
	)
	return i, err
}

const userLogin = `-- name: UserLogin :one
SELECT "id", "enabled" FROM "public"."account"
WHERE "username"=$1 AND "password"=$2
`

type UserLoginParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type UserLoginRow struct {
	ID      int64 `json:"id"`
	Enabled bool  `json:"enabled"`
}

func (q *Queries) UserLogin(ctx context.Context, arg UserLoginParams) (UserLoginRow, error) {
	row := q.db.QueryRow(ctx, userLogin, arg.Username, arg.Password)
	var i UserLoginRow
	err := row.Scan(&i.ID, &i.Enabled)
	return i, err
}
